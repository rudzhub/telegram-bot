import { Update, Start, Action } from 'nestjs-telegraf';
import { DataService } from 'src/data/data.service';
import { cities } from 'src/data/stats/cities';
import { orgs } from 'src/data/stats/organizations';
import { Context, Markup } from 'telegraf';
import * as tg from 'telegraf/typings/core/types/typegram';

@Update()
export class ActionsUpdate {
  constructor(private _dataService: DataService) {}

  @Start()
  async startCommand(ctx: Context) {
    await ctx.reply(
      '–ü—Ä–∏–≤—ñ—Ç, —Ü–µ–π –±–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —â–æ–± —Ç–∏ –∑–º—ñ–≥ –ª–µ–≥–∫–æ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è, –∫–æ–º—É —ñ —è–∫–∞ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞.\n' +
        '–î–ª—è –ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä–∏ –º—ñ—Å—Ç–æ:',
      Markup.inlineKeyboard(
        cities.map((city) => {
          return Markup.button.callback(city, `city:${city}`);
        }),
        { columns: 4 },
      ),
    );
  }

  @Action('list-of-city')
  async listOfCity(ctx: Context) {
    await ctx.reply(
      '–û–±–µ—Ä–∏ –º—ñ—Å—Ç–æ:',
      Markup.inlineKeyboard(
        cities.map((city) => {
          return Markup.button.callback(city, `city:${city}`);
        }),
        { columns: 4 },
      ),
    );
  }

  @Action([/city:.+/])
  async pickCity(ctx: Context) {
    const update = ctx.update as any;
    const [slug, city] = update.callback_query.data.split(':');

    const filtredOrgs = orgs.filter((org) => org.city == city);

    await ctx.reply(
      '–î–æ–±—Ä–µ, –æ–±–µ—Ä–∏ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—é:',
      Markup.inlineKeyboard(
        filtredOrgs.map((org) => {
          return Markup.button.callback(org.name, `orgs:${org.id}`);
        }),
        { columns: 4 },
      ),
    );
  }

  @Action(/orgs:.+/)
  async pickOrgs(ctx: Context) {
    try {
      const update = ctx.update as any;
      const [slug, orgId] = update.callback_query.data.split(':');

      const org = orgs.find((org) => org.id === orgId);
      const orgData = await this._dataService.getOrgData(orgId);

      let replyMessage =
        `–ù–∞–∑–≤–∞ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó: ${org.name} \n\n` +
        `–ö–æ–Ω—Ç–∞–∫—Ç–∏: \n\n` +
        `üì±–¢–µ–ª–µ—Ñ–æ–Ω: ${org.contacts.phone} \n`;

      if (org.contacts.address) replyMessage += `üìç–ê–¥—Ä–µ—Å–∞: @some_address \n`;
      if (org.contacts.telegram)
        replyMessage += `üîµ–¢–µ–ª–µ–≥—Ä–∞–º: @some_telegram \n`;
      if (org.contacts.facebook) replyMessage += `üîµ–§–µ–π—Å–±—É–∫: some_link\n\n`;

      replyMessage += `–û—Å—å —â–æ –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ: \n\n`;

      orgData.forEach((item) => {
        replyMessage +=
          `–ù–∞–∑–≤–∞: ${item.name} \n` +
          `–ö—ñ–ª—å–∫—ñ—Å—Ç—å (—à—Ç.): ${item.count} \n` +
          `–û–ø–∏—Å: ${item.description} \n\n`;
      });

      await ctx.reply(
        replyMessage,
        Markup.inlineKeyboard(
          [
            Markup.button.callback('–û–Ω–æ–≤–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é', `orgs:${org.id}`),
            Markup.button.callback(
              '–ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü—ñ–π',
              `city:${org.city}`,
            ),
            Markup.button.callback('–ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É –º—ñ—Å—Ç', `list-of-city`),
          ],
          { columns: 1 },
        ),
      );
    } catch (error) {
      console.error(error);
    }
  }
}
